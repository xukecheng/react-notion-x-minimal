import hotkeys from 'hotkeys-js';
import { useRef, useCallback, useEffect } from 'react';

function useIsHotkeyPressed() {
  return hotkeys.isPressed;
}

hotkeys.filter = function () {
  return true;
};

var tagFilter = function tagFilter(_ref, enableOnTags) {
  var target = _ref.target,
      srcElement = _ref.srcElement;
  // @ts-ignore
  var targetTagName = target && target.tagName || srcElement && srcElement.tagName;
  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));
};

var isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput(ev) {
  return tagFilter(ev, ['INPUT', 'TEXTAREA', 'SELECT']);
};

function useHotkeys(keys, callback, options, deps) {
  if (options instanceof Array) {
    deps = options;
    options = undefined;
  }

  var _ref2 = options || {},
      enableOnTags = _ref2.enableOnTags,
      filter = _ref2.filter,
      keyup = _ref2.keyup,
      keydown = _ref2.keydown,
      _ref2$filterPreventDe = _ref2.filterPreventDefault,
      filterPreventDefault = _ref2$filterPreventDe === void 0 ? true : _ref2$filterPreventDe;

  var ref = useRef(null);
  var memoisedCallback = useCallback(function (keyboardEvent, hotkeysEvent) {
    if (filter && !filter(keyboardEvent)) {
      return !filterPreventDefault;
    }

    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags)) {
      return true;
    }

    if (ref.current === null || document.activeElement === ref.current) {
      callback(keyboardEvent, hotkeysEvent);
      return true;
    }

    return false;
  }, deps ? [ref, enableOnTags, filter].concat(deps) : [ref, enableOnTags, filter]);
  useEffect(function () {
    if (keyup && keydown !== true) {
      options.keydown = false;
    }

    hotkeys(keys, options || {}, memoisedCallback);
    return function () {
      return hotkeys.unbind(keys, memoisedCallback);
    };
  }, [memoisedCallback, options, keys]);
  return ref;
}

export { useHotkeys, useIsHotkeyPressed };
//# sourceMappingURL=react-hotkeys-hook.esm.js.map
