{"mappings":"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","sources":["./packages/react/dropdown-menu/src/DropdownMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst DROPDOWN_MENU_NAME = 'DropdownMenu';\n\ntype ScopedProps<P> = P & { __scopeDropdownMenu?: Scope };\nconst [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(\n  DROPDOWN_MENU_NAME,\n  [createMenuScope]\n);\nconst useMenuScope = createMenuScope();\n\ntype DropdownMenuRootContextValue = {\n  isRootMenu: true;\n  triggerId: string;\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\ntype DropdownMenuSubContextValue = {\n  isRootMenu: false;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n};\n\nconst [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext<\n  DropdownMenuRootContextValue | DropdownMenuSubContextValue\n>(DROPDOWN_MENU_NAME);\n\ninterface DropdownMenuProps {\n  dir?: Direction;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n  children?: React.ReactNode;\n}\n\nconst DropdownMenu: React.FC<DropdownMenuProps> = (props: ScopedProps<DropdownMenuProps>) => {\n  const { __scopeDropdownMenu, children, open: openProp, defaultOpen, onOpenChange } = props;\n  const contentContext = useContentContext(DROPDOWN_MENU_NAME, __scopeDropdownMenu);\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  const handleOpenToggle = React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]);\n\n  return contentContext.isInsideContent ? (\n    <DropdownMenuProvider\n      scope={__scopeDropdownMenu}\n      isRootMenu={false}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={handleOpenToggle}\n    >\n      <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n        {children}\n      </MenuPrimitive.Sub>\n    </DropdownMenuProvider>\n  ) : (\n    <DropdownMenuRoot {...props} open={open} onOpenChange={setOpen} onOpenToggle={handleOpenToggle}>\n      {children}\n    </DropdownMenuRoot>\n  );\n};\n\nDropdownMenu.displayName = DROPDOWN_MENU_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ninterface DropdownMenuRootProps {\n  dir?: Direction;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal?: boolean;\n  children?: React.ReactNode;\n}\n\nconst DropdownMenuRoot: React.FC<DropdownMenuRootProps> = (\n  props: ScopedProps<DropdownMenuRootProps>\n) => {\n  const {\n    __scopeDropdownMenu,\n    children,\n    dir,\n    open,\n    onOpenChange,\n    onOpenToggle,\n    modal = true,\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  return (\n    <DropdownMenuProvider\n      scope={__scopeDropdownMenu}\n      isRootMenu={true}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      open={open}\n      onOpenChange={onOpenChange}\n      onOpenToggle={onOpenToggle}\n      modal={modal}\n    >\n      <MenuPrimitive.Root\n        {...menuScope}\n        open={open}\n        onOpenChange={onOpenChange}\n        dir={dir}\n        modal={modal}\n      >\n        {children}\n      </MenuPrimitive.Root>\n    </DropdownMenuProvider>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DropdownMenuTrigger';\n\ntype DropdownMenuTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DropdownMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst DropdownMenuTrigger = React.forwardRef<DropdownMenuTriggerElement, DropdownMenuTriggerProps>(\n  (props: ScopedProps<DropdownMenuTriggerProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;\n    const context = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return context.isRootMenu ? (\n      <MenuPrimitive.Anchor asChild {...menuScope}>\n        <Primitive.button\n          type=\"button\"\n          id={context.triggerId}\n          aria-haspopup=\"menu\"\n          aria-expanded={context.open ? true : undefined}\n          aria-controls={context.open ? context.contentId : undefined}\n          data-state={context.open ? 'open' : 'closed'}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          {...triggerProps}\n          ref={composeRefs(forwardedRef, context.triggerRef)}\n          onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              // prevent trigger focusing when opening\n              // this allows the content to be given focus without competition\n              if (!context.open) event.preventDefault();\n              context.onOpenToggle();\n            }\n          })}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (disabled) return;\n            if (['Enter', ' '].includes(event.key)) context.onOpenToggle();\n            if (event.key === 'ArrowDown') context.onOpenChange(true);\n            // prevent keypresses from scrolling window\n            if ([' ', 'ArrowDown'].includes(event.key)) event.preventDefault();\n          })}\n        />\n      </MenuPrimitive.Anchor>\n    ) : null;\n  }\n);\n\nDropdownMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DropdownMenuContent';\n\nconst [ContentProvider, useContentContext] = createDropdownMenuContext(CONTENT_NAME, {\n  isInsideContent: false,\n});\n\ntype DropdownMenuContentElement =\n  | DropdownMenuRootContentElement\n  | React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface DropdownMenuContentProps extends DropdownMenuRootContentProps, MenuContentProps {}\n\nconst DropdownMenuContent = React.forwardRef<DropdownMenuContentElement, DropdownMenuContentProps>(\n  (props: ScopedProps<DropdownMenuContentProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...contentProps } = props;\n    const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const commonProps = {\n      ...contentProps,\n      style: {\n        ...props.style,\n        // re-namespace exposed content custom property\n        ['--radix-dropdown-menu-content-transform-origin' as any]:\n          'var(--radix-popper-transform-origin)',\n      },\n    };\n\n    return (\n      <ContentProvider scope={__scopeDropdownMenu} isInsideContent={true}>\n        {context.isRootMenu ? (\n          <DropdownMenuRootContent\n            __scopeDropdownMenu={__scopeDropdownMenu}\n            {...commonProps}\n            ref={forwardedRef}\n          />\n        ) : (\n          <MenuPrimitive.Content {...menuScope} {...commonProps} ref={forwardedRef} />\n        )}\n      </ContentProvider>\n    );\n  }\n);\n\nDropdownMenuContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DropdownMenuRootContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ninterface DropdownMenuRootContentProps extends ScopedProps<MenuContentProps> {}\n\nconst DropdownMenuRootContent = React.forwardRef<\n  DropdownMenuRootContentElement,\n  DropdownMenuRootContentProps\n>((props, forwardedRef) => {\n  const { __scopeDropdownMenu, portalled = true, ...contentProps } = props;\n  const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const hasInteractedOutsideRef = React.useRef(false);\n  return context.isRootMenu ? (\n    <MenuPrimitive.Content\n      id={context.contentId}\n      aria-labelledby={context.triggerId}\n      {...menuScope}\n      {...contentProps}\n      ref={forwardedRef}\n      portalled={portalled}\n      onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n        if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n        hasInteractedOutsideRef.current = false;\n        // Always prevent auto focus because we either focus manually or want user agent focus\n        event.preventDefault();\n      })}\n      onInteractOutside={composeEventHandlers(props.onInteractOutside, (event) => {\n        const originalEvent = event.detail.originalEvent as PointerEvent;\n        const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n        if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;\n      })}\n    />\n  ) : null;\n});\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'DropdownMenuGroup';\n\ntype DropdownMenuGroupElement = React.ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface DropdownMenuGroupProps extends MenuGroupProps {}\n\nconst DropdownMenuGroup = React.forwardRef<DropdownMenuGroupElement, DropdownMenuGroupProps>(\n  (props: ScopedProps<DropdownMenuGroupProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'DropdownMenuLabel';\n\ntype DropdownMenuLabelElement = React.ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface DropdownMenuLabelProps extends MenuLabelProps {}\n\nconst DropdownMenuLabel = React.forwardRef<DropdownMenuLabelElement, DropdownMenuLabelProps>(\n  (props: ScopedProps<DropdownMenuLabelProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'DropdownMenuItem';\n\ntype DropdownMenuItemElement = React.ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface DropdownMenuItemProps extends MenuItemProps {}\n\nconst DropdownMenuItem = React.forwardRef<DropdownMenuItemElement, DropdownMenuItemProps>(\n  (props: ScopedProps<DropdownMenuItemProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTriggerItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_ITEM_NAME = 'DropdownMenuTriggerItem';\n\ntype DropdownMenuTriggerItemElement = React.ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface DropdownMenuTriggerItemProps extends MenuSubTriggerProps {}\n\nconst DropdownMenuTriggerItem = React.forwardRef<\n  DropdownMenuTriggerItemElement,\n  DropdownMenuTriggerItemProps\n>((props: ScopedProps<DropdownMenuTriggerItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...triggerItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.SubTrigger {...menuScope} {...triggerItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuTriggerItem.displayName = TRIGGER_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'DropdownMenuCheckboxItem';\n\ntype DropdownMenuCheckboxItemElement = React.ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface DropdownMenuCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  DropdownMenuCheckboxItemElement,\n  DropdownMenuCheckboxItemProps\n>((props: ScopedProps<DropdownMenuCheckboxItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...checkboxItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'DropdownMenuRadioGroup';\n\ntype DropdownMenuRadioGroupElement = React.ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface DropdownMenuRadioGroupProps extends MenuRadioGroupProps {}\n\nconst DropdownMenuRadioGroup = React.forwardRef<\n  DropdownMenuRadioGroupElement,\n  DropdownMenuRadioGroupProps\n>((props: ScopedProps<DropdownMenuRadioGroupProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioGroupProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'DropdownMenuRadioItem';\n\ntype DropdownMenuRadioItemElement = React.ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface DropdownMenuRadioItemProps extends MenuRadioItemProps {}\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  DropdownMenuRadioItemElement,\n  DropdownMenuRadioItemProps\n>((props: ScopedProps<DropdownMenuRadioItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'DropdownMenuItemIndicator';\n\ntype DropdownMenuItemIndicatorElement = React.ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface DropdownMenuItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst DropdownMenuItemIndicator = React.forwardRef<\n  DropdownMenuItemIndicatorElement,\n  DropdownMenuItemIndicatorProps\n>((props: ScopedProps<DropdownMenuItemIndicatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'DropdownMenuSeparator';\n\ntype DropdownMenuSeparatorElement = React.ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface DropdownMenuSeparatorProps extends MenuSeparatorProps {}\n\nconst DropdownMenuSeparator = React.forwardRef<\n  DropdownMenuSeparatorElement,\n  DropdownMenuSeparatorProps\n>((props: ScopedProps<DropdownMenuSeparatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...separatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'DropdownMenuArrow';\n\ntype DropdownMenuArrowElement = React.ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = Radix.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface DropdownMenuArrowProps extends MenuArrowProps {}\n\nconst DropdownMenuArrow = React.forwardRef<DropdownMenuArrowElement, DropdownMenuArrowProps>(\n  (props: ScopedProps<DropdownMenuArrowProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = DropdownMenu;\nconst Trigger = DropdownMenuTrigger;\nconst Content = DropdownMenuContent;\nconst Group = DropdownMenuGroup;\nconst Label = DropdownMenuLabel;\nconst Item = DropdownMenuItem;\nconst TriggerItem = DropdownMenuTriggerItem;\nconst CheckboxItem = DropdownMenuCheckboxItem;\nconst RadioGroup = DropdownMenuRadioGroup;\nconst RadioItem = DropdownMenuRadioItem;\nconst ItemIndicator = DropdownMenuItemIndicator;\nconst Separator = DropdownMenuSeparator;\nconst Arrow = DropdownMenuArrow;\n\nexport {\n  createDropdownMenuScope,\n  //\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuTriggerItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuSeparator,\n  DropdownMenuArrow,\n  //\n  Root,\n  Trigger,\n  Content,\n  Group,\n  Label,\n  Item,\n  TriggerItem,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n};\nexport type {\n  DropdownMenuProps,\n  DropdownMenuTriggerProps,\n  DropdownMenuContentProps,\n  DropdownMenuGroupProps,\n  DropdownMenuLabelProps,\n  DropdownMenuItemProps,\n  DropdownMenuTriggerItemProps,\n  DropdownMenuCheckboxItemProps,\n  DropdownMenuRadioGroupProps,\n  DropdownMenuRadioItemProps,\n  DropdownMenuItemIndicatorProps,\n  DropdownMenuSeparatorProps,\n  DropdownMenuArrowProps,\n};\n"],"names":["createDropdownMenuContext","createDropdownMenuScope","createContextScope","createMenuScope","useMenuScope","DropdownMenuProvider","useDropdownMenuContext","DropdownMenu","props","__scopeDropdownMenu","children","open","openProp","defaultOpen","onOpenChange","contentContext","useContentContext","menuScope","setOpen","useControllableState","prop","defaultProp","onChange","handleOpenToggle","React","useCallback","prevOpen","isInsideContent","_react","createElement","$c7ff2201b6eec7866a95d2679b05981$var$DropdownMenuProvider","scope","isRootMenu","onOpenToggle","_radixUiReactMenu","Sub","_babelRuntimeHelpersEsmExtends","$c7ff2201b6eec7866a95d2679b05981$var$DropdownMenuRoot","DropdownMenuRoot","dir","modal","triggerRef","useRef","triggerId","useId","contentId","Root","DropdownMenuTrigger","forwardRef","forwardedRef","disabled","triggerProps","context","Anchor","asChild","Primitive","button","type","id","undefined","ref","composeRefs","onPointerDown","composeEventHandlers","event","ctrlKey","preventDefault","onKeyDown","includes","key","ContentProvider","DropdownMenuContent","contentProps","commonProps","style","$c7ff2201b6eec7866a95d2679b05981$var$ContentProvider","$c7ff2201b6eec7866a95d2679b05981$var$DropdownMenuRootContent","Content","DropdownMenuRootContent","portalled","hasInteractedOutsideRef","onCloseAutoFocus","_context$triggerRef$c","current","focus","onInteractOutside","originalEvent","detail","ctrlLeftClick","isRightClick","DropdownMenuGroup","groupProps","Group","DropdownMenuLabel","labelProps","Label","DropdownMenuItem","itemProps","Item","DropdownMenuTriggerItem","triggerItemProps","SubTrigger","DropdownMenuCheckboxItem","checkboxItemProps","CheckboxItem","DropdownMenuRadioGroup","radioGroupProps","RadioGroup","DropdownMenuRadioItem","radioItemProps","RadioItem","DropdownMenuItemIndicator","itemIndicatorProps","ItemIndicator","DropdownMenuSeparator","separatorProps","Separator","DropdownMenuArrow","arrowProps","Arrow","Trigger","TriggerItem"],"version":3,"file":"index.module.js.map"}